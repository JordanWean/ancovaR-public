[{"name":"app.R","content":"# shinylive::export(appdir = \"../AncovaR-test/\", destdir = \"docs\")\r\n\r\n\r\n# library(shiny)\r\n# library(ggplot2)\r\n# library(ggpubr)\r\n# ui = fluidPage(\r\n#   titlePanel('AncovaR'),\r\n#   sidebarPanel(\r\n#     fileInput(\r\n#       'file1',\r\n#       'Choose CSV file',\r\n#       multiple = FALSE,\r\n#       accept = c('text/csv', 'text/comma-separated-values,text/plain', '.csv'),\r\n#       width = NULL,\r\n#       buttonLabel = 'Browse...',\r\n#       placeholder = 'No file selected'\r\n#     ),\r\n#     selectInput('yval', 'Which column contains the y variable?', choices =\r\n#                   c()),\r\n#     selectInput(\r\n#       'factor',\r\n#       'Which column contains the grouping variable?',\r\n#       choices = c()\r\n#     ),\r\n#     selectInput('covariate', 'Which column contains the covariate?', choices =\r\n#                   c())\r\n#   ),\r\n#   mainPanel(\r\n#     plotOutput('xyplot',height = '350px',width='500px'),\r\n#     verbatimTextOutput('ancovaResult')\r\n#     # tableOutput('TBL')\r\n#   )\r\n# )\r\n# \r\n# #################################################################################\r\n# #\r\n# # Server function\r\n# #\r\n# server = function(session,input,output) {\r\n# \r\n#   data1 = reactive({\r\n#     validate(need(input$file1,''))\r\n#     inFile = input$file1\r\n#     if (is.null(inFile))\r\n#       return(NULL)\r\n#     df = read.csv(inFile$datapath,na.strings = c('', 'NA', '#N/A'))\r\n#     # df2 = head(df, 8)\r\n#     return(df)\r\n#   })\r\n# \r\n#   data2 = reactive({\r\n#     df3 = data1()\r\n#     updateSelectInput(session,'yval',choices=colnames(df3))\r\n#     updateSelectInput(session,'factor',choices=colnames(df3))\r\n#     updateSelectInput(session,'covariate',choices=colnames(df3))\r\n#     return(df3)\r\n#   })\r\n# \r\n#   output$xyplot = renderPlot({\r\n#     ggplot(data = data2(),\r\n#            aes_string(\r\n#              x = input$covariate,\r\n#              y = input$yval,\r\n#              fill = input$factor,\r\n#              color = input$factor\r\n#            )) + geom_point() +\r\n#       theme_pubr() +\r\n#       stat_smooth(method = 'lm', col = 'black')\r\n#   })\r\n#   \r\n#   # output$ancovaResult = renderPrint({\r\n#   #   df = data2()\r\n#   #   validate(\r\n#   #     need(input$yval != '', 'Please select a y variable'),\r\n#   #     need(input$factor != '', 'Please select a grouping variable'),\r\n#   #     need(input$covariate != '', 'Please select a covariate')\r\n#   #   )\r\n#   #   df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#   #   df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#   #   df[[input$factor]] = as.factor(df[[input$factor]])\r\n#   #   \r\n#   #   # Check for conversion issues\r\n#   #   # if (any(is.na(df[[input$yval]])) |\r\n#   #   #     any(is.na(df[[input$covariate]]))) {\r\n#   #   #   stop('The y variable or covariate contains non-numeric values that could not be converted.')\r\n#   #   # }\r\n#   #   \r\n#   #   # Perform ANCOVA\r\n#   #   ancova_model = aov(as.formula(\r\n#   #     paste(\r\n#   #       input$yval,\r\n#   #       '~',\r\n#   #       input$covariate,\r\n#   #       '+',\r\n#   #       input$factor + '*',\r\n#   #       input$covariate\r\n#   #     )\r\n#   #   ), data = df)\r\n#   #   print(summary(ancova_model))\r\n#   # })\r\n#   \r\n#   \r\n#   \r\n#   ancova_model = reactive({\r\n#     df = data2()\r\n#     validate(\r\n#       need(input$yval != '', 'Please select a y variable'),\r\n#       need(input$factor != '', 'Please select a grouping variable'),\r\n#       need(input$covariate != '', 'Please select a covariate')\r\n#     )\r\n#     # Ensure data types are correct\r\n#     df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#     df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#     df[[input$factor]] = as.factor(df[[input$factor]])\r\n#     \r\n#     # Check for conversion issues\r\n#     if (any(is.na(df[[input$yval]])) | any(is.na(df[[input$covariate]]))) {\r\n#       stop('The y variable or covariate contains non-numeric values that could not be converted.')\r\n#     }\r\n#     \r\n#     # Perform ANCOVA\r\n#    aov.i = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor, '+', input$covariate, ':', input$factor)), data = df)\r\n#    aov.wo = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor)), data = df)\r\n#    return(list(aov.i, aov.wo))\r\n#   })\r\n#   \r\n#   \r\n#   \r\n#   output$xyplot = renderPlot({\r\n#     ggplot(data = data2(),\r\n#            aes_string(\r\n#              x = input$covariate,\r\n#              y = input$yval,\r\n#              fill = input$factor,\r\n#              color = input$factor\r\n#            )) + \r\n#       geom_point() +\r\n#       theme_pubr() +\r\n#       stat_smooth(method = 'lm', col = 'black')\r\n#   })\r\n#   \r\n#   output$ancovaResult = renderPrint({\r\n#     model = ancova_model()\r\n#     print('ANCOVA with interaction')\r\n#     print(summary(model[[1]]))\r\n#     print('ANCOVA without interaction')\r\n#     print(summary(model[[2]]))\r\n#   })\r\n#   \r\n# }\r\n# shinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n# library(shiny)\r\n# library(ggplot2)\r\n# ui = fluidPage(\r\n#   titlePanel('Analysis of Returns Data'),\r\n#   fileInput('file1', 'Choose CSV file', multiple = FALSE,\r\n#             accept = c('text/csv','text/comma-separated-values,text/plain','.csv'),\r\n#             width = NULL, buttonLabel = 'Browse...',\r\n#             placeholder = 'No file selected'),\r\n#   selectInput('series', 'Choose a stock ticker:', choices=c()),\r\n#   \r\n#   mainPanel(\r\n#     plotOutput('time',width='63%',height='275px')\r\n#     # tableOutput('TBL')\r\n#   )\r\n# )\r\n# \r\n# #################################################################################\r\n# #\r\n# # Server function\r\n# #\r\n# server = function(session,input,output) {\r\n#   \r\n#   data1 = reactive({\r\n#     validate(need(input$file1,''))\r\n#     inFile = input$file1\r\n#     if (is.null(inFile))\r\n#       return(NULL)\r\n#     df = read.csv(inFile$datapath,na.strings = c('', 'NA', '#N/A'))\r\n#     df2 = head(df, 8)\r\n#     return(df2)    \r\n#   })\r\n#   \r\n#   data2 = reactive({\r\n#     df3 = data1()\r\n#     updateSelectInput(session,'series',choices=colnames(df3))\r\n#     updateSelectInput(session,'series',choices=colnames(df3)) \r\n#     updateSelectInput(session,'series',choices=colnames(df3)) \r\n#     return(df3)    \r\n#   })\r\n#   \r\n#   \r\n#   output$time = renderPlot({\r\n#     ggplot(data=data2(), aes_string(x='Country',y=input$series)) + geom_point(color='darkblue')\r\n#   })\r\n# }\r\n# shinyApp(ui = ui, server = server)\r\n\r\n\r\n# library(shiny)\r\n# library(ggplot2)\r\n# library(ggpubr)\r\n# library(dplyr)\r\n# \r\n# ui = fluidPage(\r\n#   titlePanel('AncovaR'),\r\n#   sidebarPanel(\r\n#     fileInput(\r\n#       'file1',\r\n#       'Choose CSV file',\r\n#       multiple = FALSE,\r\n#       accept = c('text/csv', 'text/comma-separated-values,text/plain', '.csv'),\r\n#       width = NULL,\r\n#       buttonLabel = 'Browse...',\r\n#       placeholder = 'No file selected'\r\n#     ),\r\n#     selectInput('yval', 'Which column contains the y variable?', choices = c()),\r\n#     selectInput('factor', 'Which column contains the grouping variable?', choices = c()),\r\n#     selectInput('covariate', 'Which column contains the covariate?', choices = c())\r\n#   ),\r\n#   mainPanel(\r\n#     plotOutput('xyplot', height = '350px', width = '500px'),\r\n#     verbatimTextOutput('ancovaResult')\r\n#   )\r\n# )\r\n# \r\n# server = function(session, input, output) {\r\n# \r\n#   data1 = reactive({\r\n#     validate(need(input$file1, 'Please upload a CSV file'))\r\n#     inFile = input$file1\r\n#     if (is.null(inFile))\r\n#       return(NULL)\r\n#     df = read.csv(inFile$datapath, na.strings = c('', 'NA', '#N/A'))\r\n#     return(df)\r\n#   })\r\n# \r\n#   data2 = reactive({\r\n#     df3 = data1()\r\n#     updateSelectInput(session, 'yval', choices=colnames(df3))\r\n#     updateSelectInput(session, 'factor', choices=colnames(df3))\r\n#     updateSelectInput(session, 'covariate', choices=colnames(df3))\r\n#     return(df3)\r\n#   })\r\n# \r\n#   regression_lines = reactive({\r\n#     df = data2()\r\n#     validate(\r\n#       need(input$yval != '', 'Please select a y variable'),\r\n#       need(input$factor != '', 'Please select a grouping variable'),\r\n#       need(input$covariate != '', 'Please select a covariate')\r\n#     )\r\n#     \r\n#     # Ensure data types are correct\r\n#     df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#     df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#     df[[input$factor]] = as.factor(df[[input$factor]])\r\n#     \r\n#     # Compute lines separately\r\n#     lines_data = df %>%\r\n#       group_by(!!sym(input$factor)) %>%\r\n#       do({\r\n#         fit = lm(reformulate(input$covariate, input$yval), data = .)\r\n#         grid = data.frame(input_covariate_vals = seq(min(.[[input$covariate]], na.rm = TRUE), max(.[[input$covariate]], na.rm = TRUE), length.out = 100))\r\n#         predictions = predict(fit, newdata = grid)\r\n#         data.frame(covariate = grid$input_covariate_vals, predicted = predictions, factor = unique(.[[input$factor]]))\r\n#       })\r\n#     \r\n#     return(lines_data)\r\n#   })\r\n# \r\n#   \r\n#   output$xyplot = renderPlot({\r\n#     df = data2()\r\n#     ggplot(data = df, aes_string(\r\n#       x = input$covariate,\r\n#       y = input$yval,\r\n#       color = input$factor\r\n#     )) +\r\n#       geom_point() +\r\n#       # geom_line(data = regression_lines(), aes(x = covariate, y = predicted, group = factor, color = factor)) +\r\n#       theme_pubr()\r\n#   })\r\n# \r\n#   output$ancovaResult = renderPrint({\r\n#     model = ancova_model()\r\n#     if (is.null(model)) {\r\n#       return('No model available - please ensure data is uploaded and valid selections are made.')\r\n#     }\r\n#     cat('ANCOVA with interaction\\n')\r\n#     print(summary(model[[1]]))\r\n#     cat('\\nANCOVA without interaction\\n')\r\n#     print(summary(model[[2]]))\r\n#   })\r\n# \r\n#   ancova_model = reactive({\r\n#     df = data2()\r\n#     validate(\r\n#       need(input$yval != '', 'Please select a y variable'),\r\n#       need(input$factor != '', 'Please select a grouping variable'),\r\n#       need(input$covariate != '', 'Please select a covariate')\r\n#     )\r\n# \r\n#     # Ensure data types are correct\r\n#     df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#     df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#     df[[input$factor]] = as.factor(df[[input$factor]])\r\n# \r\n#     # Check for conversion issues\r\n#     if (any(is.na(df[[input$yval]])) | any(is.na(df[[input$covariate]]))) {\r\n#       stop('The y variable or covariate contains non-numeric values that could not be converted.')\r\n#     }\r\n# \r\n#     # Perform ANCOVA\r\n#     aov.i = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor, '+', input$covariate, ':', input$factor)), data = df)\r\n#     aov.wo = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor)), data = df)\r\n# \r\n#     return(list(aov.i, aov.wo))\r\n#   })\r\n# }\r\n# \r\n# shinyApp(ui = ui, server = server)\r\n\r\n# library(shiny)\r\n# library(ggplot2)\r\n# library(ggpubr)\r\n# library(dplyr)\r\n# \r\n# ui = fluidPage(\r\n#   titlePanel('AncovaR'),\r\n#   sidebarPanel(\r\n#     fileInput(\r\n#       'file1',\r\n#       'Choose CSV file',\r\n#       multiple = FALSE,\r\n#       accept = c('text/csv', 'text/comma-separated-values,text/plain', '.csv'),\r\n#       width = NULL,\r\n#       buttonLabel = 'Browse...',\r\n#       placeholder = 'No file selected'\r\n#     ),\r\n#     selectInput('yval', 'Which column contains the y variable?', choices = c()),\r\n#     selectInput('factor', 'Which column contains the grouping variable?', choices = c()),\r\n#     selectInput('covariate', 'Which column contains the covariate?', choices = c())\r\n#   ),\r\n#   mainPanel(\r\n#     plotOutput('xyplot', height = '350px', width = '500px'),\r\n#     verbatimTextOutput('ancovaResult')\r\n#   )\r\n# )\r\n# \r\n# server = function(session, input, output) {\r\n#   \r\n#   data1 = reactive({\r\n#     validate(need(input$file1, 'Please upload a CSV file'))\r\n#     inFile = input$file1\r\n#     if (is.null(inFile))\r\n#       return(NULL)\r\n#     df = read.csv(inFile$datapath, na.strings = c('', 'NA', '#N/A'))\r\n#     return(df)\r\n#   })\r\n#   \r\n#   data2 = reactive({\r\n#     df3 = data1()\r\n#     updateSelectInput(session, 'yval', choices=colnames(df3))\r\n#     updateSelectInput(session, 'factor', choices=colnames(df3))\r\n#     updateSelectInput(session, 'covariate', choices=colnames(df3))\r\n#     return(df3)\r\n#   })\r\n#   \r\n#   regression_lines = reactive({\r\n#     df = data2()\r\n#     validate(\r\n#       need(input$yval != '', 'Please select a y variable'),\r\n#       need(input$factor != '', 'Please select a grouping variable'),\r\n#       need(input$covariate != '', 'Please select a covariate')\r\n#     )\r\n#     \r\n#     # Ensure data types are correct\r\n#     df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#     df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#     df[[input$factor]] = as.factor(df[[input$factor]])\r\n#     \r\n#     # Compute lines separately\r\n#     lines_data = df %>%\r\n#       group_by(.data[[input$factor]]) %>%\r\n#       group_modify(~{\r\n#         fit = lm(reformulate(input$covariate, input$yval), data = .x)\r\n#         grid = data.frame(covariate = seq(min(.x[[input$covariate]], na.rm = TRUE),\r\n#                                           max(.x[[input$covariate]], na.rm = TRUE), length.out = 100))\r\n#         predictions = predict(fit, newdata = grid)\r\n#         data.frame(covariate = grid$covariate, predicted = predictions)\r\n#       }) %>%\r\n#       ungroup()\r\n#     \r\n#     # Add factor information back to the lines_data from grouped data\r\n#     lines_data[[input$factor]] = rep(levels(df[[input$factor]]), each = 100)\r\n#     \r\n#     print(head(lines_data))  # Debugging: Check if lines_data is formatted correctly\r\n#     \r\n#     return(lines_data)\r\n#   })\r\n#   \r\n#   output$xyplot = renderPlot({\r\n#     df = data2()\r\n#     ggplot(data = df, aes_string(\r\n#       x = input$covariate,\r\n#       y = input$yval,\r\n#       color = input$factor\r\n#     )) +\r\n#       geom_point() +\r\n#       geom_line(data = regression_lines(), aes(x = covariate, y = predicted, group = factor, color = factor)) +\r\n#       theme_pubr()\r\n#   })\r\n#   \r\n#   output$ancovaResult = renderPrint({\r\n#     model = ancova_model()\r\n#     if (is.null(model)) {\r\n#       return('No model available - please ensure data is uploaded and valid selections are made.')\r\n#     }\r\n#     cat('ANCOVA with interaction\\n')\r\n#     print(summary(model[[1]]))\r\n#     cat('\\nANCOVA without interaction\\n')\r\n#     print(summary(model[[2]]))\r\n#   })\r\n#   \r\n#   ancova_model = reactive({\r\n#     df = data2()\r\n#     validate(\r\n#       need(input$yval != '', 'Please select a y variable'),\r\n#       need(input$factor != '', 'Please select a grouping variable'),\r\n#       need(input$covariate != '', 'Please select a covariate')\r\n#     )\r\n#     \r\n#     # Ensure data types are correct\r\n#     df[[input$yval]] = as.numeric(df[[input$yval]])\r\n#     df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n#     df[[input$factor]] = as.factor(df[[input$factor]])\r\n#     \r\n#     # Check for conversion issues\r\n#     if (any(is.na(df[[input$yval]])) | any(is.na(df[[input$covariate]]))) {\r\n#       stop('The y variable or covariate contains non-numeric values that could not be converted.')\r\n#     }\r\n#     \r\n#     # Perform ANCOVA\r\n#     aov.i = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor, '+', input$covariate, ':', input$factor)), data = df)\r\n#     aov.wo = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor)), data = df)\r\n#     \r\n#     return(list(aov.i, aov.wo))\r\n#   })\r\n# }\r\n# \r\n# shinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(ggpubr)\r\nlibrary(dplyr)\r\nlibrary(markdown)\r\n\r\nui = fluidPage(\r\n  titlePanel('AncovaR'),\r\n  sidebarPanel(\r\n    fileInput(\r\n      'file1',\r\n      'Choose CSV file',\r\n      multiple = FALSE,\r\n      accept = c('text/csv', 'text/comma-separated-values,text/plain', '.csv'),\r\n      width = NULL,\r\n      buttonLabel = 'Browse...',\r\n      placeholder = 'No file selected'\r\n    ),\r\n    selectInput('yval', 'Which column contains the y variable?', choices = c()),\r\n    selectInput('factor', 'Which column contains the grouping variable?', choices = c()),\r\n    selectInput('covariate', 'Which column contains the covariate?', choices = c())\r\n  ),\r\n  mainPanel(\r\n    plotOutput('xyplot', height = '350px', width = '500px'),\r\n    htmlOutput('ancovaExplanation')\r\n  )\r\n)\r\n\r\nserver = function(session, input, output) {\r\n  \r\n  data1 = reactive({\r\n    validate(need(input$file1, 'Please upload a CSV file'))\r\n    inFile = input$file1\r\n    if (is.null(inFile))\r\n      return(NULL)\r\n    df = read.csv(inFile$datapath, na.strings = c('', 'NA', '#N/A'))\r\n    return(df)\r\n  })\r\n  \r\n  data2 = reactive({\r\n    df3 = data1()\r\n    updateSelectInput(session, 'yval', choices=colnames(df3))\r\n    updateSelectInput(session, 'factor', choices=colnames(df3))\r\n    updateSelectInput(session, 'covariate', choices=colnames(df3))\r\n    return(df3)\r\n  })\r\n  \r\n  regression_lines = reactive({\r\n    df = data2()\r\n    validate(\r\n      need(input$yval != '', 'Please select a y variable'),\r\n      need(input$factor != '', 'Please select a grouping variable'),\r\n      need(input$covariate != '', 'Please select a covariate')\r\n    )\r\n    \r\n    # Ensure data types are correct\r\n    df[[input$yval]] = as.numeric(df[[input$yval]])\r\n    df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n    df[[input$factor]] = as.factor(df[[input$factor]])\r\n    \r\n    # Compute lines separately\r\n    lines_data = df %>%\r\n      group_by(!!sym(input$factor)) %>%\r\n      do({\r\n        fit = lm(reformulate(input$covariate, input$yval), data = .)\r\n        grid = data.frame(input_covariate_vals = seq(min(.[[input$covariate]], na.rm = TRUE), max(.[[input$covariate]], na.rm = TRUE), length.out = 100))\r\n        predictions = predict(fit, newdata = grid)\r\n        data.frame(covariate = grid$input_covariate_vals, predicted = predictions, factor = unique(.[[input$factor]]))\r\n      })\r\n    \r\n    return(lines_data)\r\n  })\r\n  \r\n  \r\n  output$xyplot = renderPlot({\r\n    df = data2()\r\n    ggplot(data = df, aes_string(\r\n      x = input$covariate,\r\n      y = input$yval,\r\n      color = input$factor\r\n    )) +\r\n      geom_point() +\r\n      theme_pubr()\r\n  })\r\n  \r\n  output$ancovaExplanation = renderUI({\r\n    model = ancova_model()\r\n    \r\n    if (is.null(model)) {\r\n      return(\"No model available - please ensure data is uploaded and valid selections are made.\")\r\n    }\r\n    \r\n    # Prepare results as markdown-formatted text\r\n    ancova_summary <- capture.output({\r\n      cat('ANCOVA with interaction\\n')\r\n      print(summary(model[[1]]))\r\n      cat('\\nANCOVA without interaction\\n')\r\n      print(summary(model[[2]]))\r\n    })\r\n    \r\n    explanation <- \"\r\n    <h3>ANCOVA Analysis<\/h3>\r\n    <p>The ANCOVA (Analysis of Covariance) assesses whether population means of a dependent variable (response variable) are equal across levels of a categorical independent variable (factor), while controlling for other continuous variables (covariates).<\/p>\r\n    <p>The interaction effect in ANCOVA checks if the relationship between covariate and response variable differs across levels of the factor. For a proper ANCOVA, you must meet the assumption of homogeneity of slopes. This is tested using the first analysis, <strong>ANCOVA with interaction<\/strong>. If the p value for the interaction (the line with covariate:factor) is non-significant, your data meets the assumption. You can then use the numbers from the <strong>ANCOVA without interaction<\/strong> section as your true ANCOVA results.<\/p>\r\n    <pre><code>%s<\/code><\/pre>\r\n    \"\r\n    \r\n    HTML(sprintf(explanation, paste(ancova_summary, collapse = \"<br/>\")))\r\n  })\r\n  \r\n  ancova_model = reactive({\r\n    df = data2()\r\n    validate(\r\n      need(input$yval != '', 'Please select a y variable'),\r\n      need(input$factor != '', 'Please select a grouping variable'),\r\n      need(input$covariate != '', 'Please select a covariate')\r\n    )\r\n    \r\n    # Ensure data types are correct\r\n    df[[input$yval]] = as.numeric(df[[input$yval]])\r\n    df[[input$covariate]] = as.numeric(df[[input$covariate]])\r\n    df[[input$factor]] = as.factor(df[[input$factor]])\r\n    \r\n    # Check for conversion issues\r\n    if (any(is.na(df[[input$yval]])) | any(is.na(df[[input$covariate]]))) {\r\n      stop('The y variable or covariate contains non-numeric values that could not be converted.')\r\n    }\r\n    \r\n    # Perform ANCOVA\r\n    aov.i = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor, '+', input$covariate, ':', input$factor)), data = df)\r\n    aov.wo = aov(as.formula(paste(input$yval, '~', input$covariate, '+', input$factor)), data = df)\r\n    \r\n    return(list(aov.i, aov.wo))\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"}]
